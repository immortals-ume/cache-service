name: CI/CD - Reactive Cache Service

on:
  push:
    branches: [ develop, main, master ]
  pull_request:
    branches: [ develop, main, master ]

env:
  JAVA_VERSION: '21'
  DISTRO: 'temurin'

jobs:

  setup:
    name: Setup & Extract Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.DISTRO }}

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Extract Project Version
        id: extract_version
        run: |
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.DISTRO }}

      - name: Run Tests
        run: ./mvnw clean verify

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: target/surefire-reports

  #  sonar:
  #    name: SonarCloud Static Analysis
  #    runs-on: ubuntu-latest
  #    needs: test
  #    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
  #    steps:
  #      - uses: actions/checkout@v3
  #
  #      - name: Set up Java ${{ env.JAVA_VERSION }}
  #        uses: actions/setup-java@v3
  #        with:
  #          java-version: ${{ env.JAVA_VERSION }}
  #          distribution: ${{ env.DISTRO }}
  #
  #      - name: SonarCloud Scan
  #        uses: SonarSource/sonarcloud-github-action@master
  #        with:
  #          projectKey: your-org_reactive-cache-service
  #          organization: your-org
  #        env:
  #          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Package Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.DISTRO }}

      - name: Package JAR (skip tests)
        run: ./mvnw clean package -DskipTests

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: reactive-cache-service-${{ needs.setup.outputs.version }}.jar
          path: target/*.jar

#  deploy:
#    name: Deploy to Production
#    runs-on: ubuntu-latest
#    needs: build
#    if: github.ref == 'refs/heads/master'
#    steps:
#      - name: Download Built Artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: reactive-cache-service-${{ needs.setup.outputs.version }}.jar
#
#      - name: Deploy to Server (Example)
#        run: |
#          echo "Deploying version ${{ needs.setup.outputs.version }} to production..."
#          # scp, ssh, kubectl, or AWS CLI deployment can be used here
#
#      - name: Notify Slack (Optional)
#        uses: slackapi/slack-github-action@v1.25.0
#        with:
#          payload: |
#            {
#              "channel": "#deployments",
#              "text": "âœ… Production Deployment Successful: *Reactive Cache Service* version ${{ needs.setup.outputs.version }}"
#            }
#        env:
#          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
